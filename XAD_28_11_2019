#include<stdio.h>

#include<locale.h>

#include<string.h>

#include<stdlib.h>

#include<ctype.h>
/*
ALUNOS : 
1- GABRIEL JOSÉ SERAFIM SANTOS
2- LEONARDO JAIME
3- HENRIQUE MALISANO
4- JOÃO GUILHERME RIBEIRO
5- PEDRO HENRIQUE REIS
*/
tabuleiro(int i, int j, int mudar, char newPiece, char tabu[8][8]) {
  char piece = tabu[i][j];
  if (mudar == 1) {
    tabu[i][j] = newPiece;
  } else {

    return piece;
  }

}

//NESSA FUNCAO IREMOS MOSTRAR O TABULEIRO NO CONSOLE
void showTabu(char tabu[8][8]) {
  system("cls");
  printf("\t    A B C D E F G H\n");
  int indice = 0;
  for (int i = 0; i < 8; i++) {
    indice++;
    printf("\t %d |%c|%c|%c|%c|%c|%c|%c|%c|\n", indice, tabuleiro(i, 0, 0, ' ', tabu), tabuleiro(i, 1, 0, ' ', tabu), tabuleiro(i, 2, 0, ' ', tabu), tabuleiro(i, 3, 0, ' ', tabu), tabuleiro(i, 4, 0, ' ', tabu), tabuleiro(i, 5, 0, ' ', tabu), tabuleiro(i, 6, 0, ' ', tabu), tabuleiro(i, 7, 0, ' ', tabu));
  }
}
//NA FUNÇÃO ABAIXO IREMOS PEDIR AO JOGADOR QUE ESCREVA A PEÇA ESCOLHILDA PARA SE MOVIMENTAR	
void digiteCasaAtual(int * plinha, int * pcolunaNum) {
  char colunaChar;
  int linha;
  printf("Escolha a coordenada da sua peça: Coluna depois Linha\n");
  fflush(stdin);
  scanf("%c", & colunaChar);
  fflush(stdin);
  scanf("%d", & linha);
  fflush(stdin);
  * plinha = linha - 1;
  * pcolunaNum = colunaChar - 65;
  //NESSE WHILE, IREMOS VERIFICAR SE AS COORDENADAS ESCOLHIDAS EXISTE
  if (( * pcolunaNum < 0 || * pcolunaNum > 7) || ( * plinha < 0 || * plinha > 7)) {
    /*SISTEMA DE COORD POR ASCII TABLE: AO ESCOLHER A COLUNA, O JOGADOR IRÁ ESCREVER UMA LETRA PARA REPRESENTÁ-LA. CADA LETRA, NA TABELA ASCII, TEM SEU RESPECTIVO NÚMERO.
    	A LETRA "A" É A PRIMEIRA LETRA DO ALFABETO E É REPRESENTADA PELO NÚMERO 65. ENTÃO PARA TRANSFORMAR ESSAS COLUNAS DE LETRAS EM NÚMEROS PARA MAPEAR A MATRIZ, NÓS SUBTRAIRMOS 
    	O NÚMERO REPRESENTATIVO DE CADA LETRA POR 65. 
    	EXEMPLO : COLUNA = A: NUM(A) = 65. 65-65 =0, ENTAO COLUNA É ZERO. COLUNA = B: NUM(B) = 66. 66-65 = 1, ENTAO COLUNA É 1 
    */
    printf("Coordenada não existe\n");
  }
}
//NA FUNÇÃO ABAIXO IREMOS PEDIR AO JOGADOR QUE ESCREVA PARA ONDE DESEJA MIGRAR SUA PEÇA	
void digiteCasaMigrar(int * plinha2, int * pcolunaNum2, char tabu[8][8]) {
  char colunaChar;
  int linha2, linha, colunaNum;
  printf("Escolha a casa que deseja migrar sua peça (Coluna depois Linha)\n");
  fflush(stdin);
  scanf("%c", & colunaChar);
  fflush(stdin);
  scanf("%d", & linha2);
  fflush(stdin);
  * plinha2 = linha2 - 1;
  //FIZEMOS A DIFERENÇA ABAIXO PARA CONVERTER O CHARACTER EM UMA COLUNA DA MATRIZ ( ASCII TABLE )
  * pcolunaNum2 = colunaChar - 65;
  //NESSE WHILE, IREMOS VERIFICAR SE AS COORDENADAS ESCOLHIDAS EXISTEM
  if (( * pcolunaNum2 < 0 || * pcolunaNum2 > 7) || ( * plinha2 < 0 || * plinha2 > 7)) {
    printf("Coordenada não existe\n");
    printf("Escolha a coordenada da sua peça: Coluna depois Linha\n");
    /*SISTEMA DE COORD POR ASCII TABLE: AO ESCOLHER A COLUNA, O JOGADOR IRÁ ESCREVER UMA LETRA PARA REPRESENTÁ-LA. CADA LETRA, NA TABELA ASCII, TEM SEU RESPECTIVO NÚMERO.
    	A LETRA "A" É A PRIMEIRA LETRA DO ALFABETO E É REPRESENTADA PELO NÚMERO 65. ENTÃO PARA TRANSFORMAR ESSAS COLUNAS DE LETRAS EM NÚMEROS PARA MAPEAR A MATRIZ, NÓS SUBTRAIRMOS 
    	O NÚMERO REPRESENTATIVO DE CADA LETRA POR 65. 
    	EXEMPLO : COLUNA = A: NUM(A) = 65. 65-65 =0, ENTAO COLUNA É ZERO. COLUNA = B: NUM(B) = 66. 66-65 = 1, ENTAO COLUNA É 1 
    */
  }

}
//NA FUNÇÃO ABAIXO, VAMOS VERIFICAR SE A CASA ESCOLHIDA, PARA MOVIMENTAR A PEÇA, ESTÁ DISPONÍVEL
int checarCasaVazia(int linha, int coluna, char tabu[8][8]) {
  //SE X FOR ZERO, CASA ESTA VAZIA, SENÃO, ESTÁ OCUPADA
  int x = 0;
  if (tabuleiro(linha, coluna, 0, ' ', tabu) != ' ') {
    printf("Essa casa não está vazia!\n");
    x = 1;
  }
  return x;
}
void vitoria(char tabu[8][8], int jogador) {
  system("cls");
  printf("\t    A B C D E F G H\n");
  int indice = 0;
  for (int i = 0; i < 8; i++) {
    indice++;
    printf("\t %d |%c|%c|%c|%c|%c|%c|%c|%c|\n", indice, tabuleiro(i, 0, 0, ' ', tabu), tabuleiro(i, 1, 0, ' ', tabu), tabuleiro(i, 2, 0, ' ', tabu), tabuleiro(i, 3, 0, ' ', tabu), tabuleiro(i, 4, 0, ' ', tabu), tabuleiro(i, 5, 0, ' ', tabu), tabuleiro(i, 6, 0, ' ', tabu), tabuleiro(i, 7, 0, ' ', tabu));
  }
  printf("/===========================/ FIM DE JOGO /===========================/\n");
  printf("			PARABENS JOGADOR %d, VOCÊ GANHOU O JOGO!\n", jogador);
  printf("/=====================================================================/\n");

}

//NESSA FUNÇÃO, O CÓDIGO IRA ADICIONAR A PEÇA, QUE VOCÊ ESCOLHER, NA CASA ESCOLHIDA
void adicionarPiece(int linha, int coluna, int linha2, int coluna2, char tabu[8][8], int ** * emJogo, int jogador) {
  if (tabuleiro(linha2, coluna2, 0, ' ', tabu) == 'K' || tabuleiro(linha2, coluna2, 0, ' ', tabu) == 'k') {
    //ARMAZENANDO O A PEÇA NA NOVA CASA
    tabuleiro(linha2, coluna2, 1, tabuleiro(linha, coluna, 0, ' ', tabu), tabu);
    tabuleiro(linha, coluna, 1, ' ', tabu);
    vitoria(tabu, jogador); **
    * emJogo = 0;
  } else {
    tabuleiro(linha2, coluna2, 1, tabuleiro(linha, coluna, 0, ' ', tabu), tabu);
    tabuleiro(linha, coluna, 1, ' ', tabu);
    showTabu(tabu);
  }

}

void verificarPecasAoRedor(int * vitima, int linha, int coluna, char tabu[8][8]) {
  char pieces[7] = "PKQBTH", pieces2[7] = "pkqbth";
  int tam = strlen(pieces);
  *vitima = 0;
  for (int x = 0; x < tam; x++) {
    if (tabuleiro(linha, coluna, 0, ' ', tabu) == pieces[x]) {
      * vitima = 1;
    } else if (tabuleiro(linha, coluna, 0, ' ', tabu) == pieces2[x]) {
      * vitima = 2;
    }
  }

}

void moverBispo(int * proximoJog, int linha, int colunaNum, int jogador, char tabu[8][8], int ** emJogo) {
  if (tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'B' || tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'b') {
    int linha2, colunaNum2;
    digiteCasaMigrar( & linha2, & colunaNum2, tabu);
    int subtrL = linha2 - linha;
    int subtrC = colunaNum2 - colunaNum;
    int vitima, x;
    // VERIFICAR SE O NUMERO DE LINHAS E COLUNAS MOVIMENTADAS SAO IGUAIS
    if (abs(subtrL) != abs(subtrC)) {
      printf("Movimentação inválida: O bispo so pode se mover pela diagonal\n");
    } else {
      int j = colunaNum, i = linha, invalido = 0;
      verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
      //SE TENTAR SUBIR LINHAS
      if (subtrL < 0) {
        while (i > linha2) {
          //SE TENTAR IR PRA DIREITA
          if (subtrC > 0) {
            j++;
            //SE TENTAR IR PRA ESQUERDA
          } else if (subtrC < 0) {
            j--;
          }
          i--;
          if (tabuleiro(i, j, 0, ' ', tabu) != ' ' && i != linha2 && j != colunaNum2) {
            printf("Movimentação inválida: Há uma peça no caminho\n");
            invalido = 1;
            break;
          }
        }
        //SE TENTAR DESCER LINHAS
      } else if (subtrL > 0) {
        //SE TENTAR IR PRA DIREITA
        while (i < linha2) {
          if (subtrC > 0) {
            j++;
            //SE TENTAR IR PRA ESQUERDA
          } else if (subtrC < 0) {
            j--;
          }
          i++;
          if (tabuleiro(i, j, 0, ' ', tabu) != ' ' && i != linha2 && j != colunaNum2) {
            printf("Movimentação inválida: Há uma peça no caminho\n");
            invalido = 1;
            break;
          }
        }
      }
      //CASO ACONTEÇA UMA JOGADA INVÁLIDA
      if (invalido == 1) {

        if (vitima != 0) {
          //SE O JOGADOR TENTAR CAPTURAR SUA PRÓPRIA PEÇA
          if (vitima == jogador) {
            printf("Movimentação inválida: Não pode capturar suas peças!\n");
          }
        }
        //CASO ACONTEÇA UMA JOGADA VÁLIDA	
      } else {
        //CASO JOGADA MIGRE PRA UMA CASA DISPONÍVEL
        if (vitima != jogador) {
          adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
          * proximoJog = 1;

        } else {
          //SE O JOGADOR TENTAR CAPTURAR SUA PRÓPRIA PEÇA
          printf("Movimentação inválida: Não pode capturar suas peças!\n");
        }
      }
    }
  }
}
void moverRainha(int * proximoJog, int linha, int colunaNum, int jogador, char tabu[8][8], int ** emJogo) {
  if (tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'Q' || tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'q') {
    int colunaNum2, linha2;
    digiteCasaMigrar( & linha2, & colunaNum2, tabu);
    int subtrL = linha2 - linha;
    int subtrC = colunaNum2 - colunaNum;
    int vitima, invalido = 0;
    verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
    // VERIFICAR SE APENAS A COLUNA FOI ALTERADA
    if (linha2 == linha && colunaNum != colunaNum2) {
      //SE DESLOCOU PRA DIREITA
      if (subtrC > 0) {
        for (int j = colunaNum; j < colunaNum2; j++) {
          if (tabuleiro(linha, j, 0, ' ', tabu) != ' ' && j != colunaNum2 && j != colunaNum) {
            printf("Movimentação inválida: Há uma peça no caminho!\n ");
            invalido = 1;
            break;
          }
        }
        //SE DESLOCOU PRA ESQUERDA
      } else if (subtrC < 0) {
        for (int j = colunaNum; j > colunaNum2; j--) {
          if (tabuleiro(linha, j, 0, ' ', tabu) != ' ' && j != colunaNum2 && j != colunaNum) {
            printf("Movimentação inválida: Há uma peça no caminho!\n");
            invalido = 1;
            break;
          }
        }
      }
      // VERIFICAR SE APENAS A LINHA FOI ALTERADA
    } else if (linha2 != linha && colunaNum == colunaNum2) {
      //VERIFICAR SE DESLOCOU PRA CIMA
      if (subtrL > 0) {
        for (int i = linha; i < linha2; i++) {
          if (tabuleiro(i, colunaNum, 0, ' ', tabu) != ' ' && i != linha2 && i != linha) {
            printf("Movimentação inválida: Há uma peça no caminho!\n");
            invalido = 1;
            break;
          }
        }
        //VERIFICAR SE DESLOCOU PRA BAIXOU
      } else if (subtrL < 0) {
        for (int i = linha; i > linha2; i--) {
          if (tabuleiro(i, colunaNum, 0, ' ', tabu) != ' ' && i != linha2 && i != linha) {
            printf("Movimentação inválida: Há uma peça no caminho!\n ");
            invalido = 1;
            break;
          }
        }

      }

    } else if (abs(subtrL) == abs(subtrC)) {
      int j = colunaNum, i = linha;
      verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
      //SE TENTAR SUBIR LINHAS
      if (subtrL < 0) {
        while (i > linha2) {
          //SE TENTAR IR PRA DIREITA
          if (subtrC > 0) {
            j++;
            //SE TENTAR IR PRA ESQUERDA
          } else if (subtrC < 0) {
            j--;
          }
          i--;
          if (tabuleiro(i, j, 0, ' ', tabu) != ' ' && i != linha2 && j != colunaNum2) {
            printf("Movimentação inválida: Há uma peça no caminho\n");
            invalido = 1;
            break;
          }
        }
        //SE TENTAR DESCER LINHAS
      } else if (subtrL > 0) {
        //SE TENTAR IR PRA DIREITA
        while (i < linha2) {
          if (subtrC > 0) {
            j++;
            //SE TENTAR IR PRA ESQUERDA
          } else if (subtrC < 0) {
            j--;
          }
          i++;
          if (tabuleiro(i, j, 0, ' ', tabu) != ' ' && i != linha2 && j != colunaNum2) {
            printf("Movimentação inválida: Há uma peça no caminho\n");
            invalido = 1;
            break;
          }
        }
      }
      //CASO O JOGADOR NAO FIZER UM MOVIMENTO VÁLIDO
    } else {
      printf("Movimentação inválida!\n");
      invalido = 1;
    }
    //SE HOUVER UMA MOVIMENTAÇÃO VÁLIDA
    if (invalido != 1) {
      //SE A CASA ESTIVER OCUPADA
      if (vitima != 0) {
        //SE O JOGADOR CAPTURAR A PRÓPRIA PEÇA
        if (vitima == jogador) {
          printf("Movimentação inválida: Não pode capturar suas peças!\n");
          //SE A CASA ESTIVER DISPONÍVEL PARA CAPTURAR
        } else {
          adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
          * proximoJog = 1;
        }
        //SE A CASA ESTIVER LIVRE
      } else {
        adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
        * proximoJog = 1;
      }
    }
  }
}

void moverRei(int * proximoJog, int linha, int colunaNum, int jogador, char tabu[8][8], int ** emJogo) {
  if (tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'K' || tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'k') {
    int linha2, colunaNum2;
    digiteCasaMigrar( & linha2, & colunaNum2, tabu);
    int subtrL = linha2 - linha;
    int subtrC = colunaNum2 - colunaNum;
    int vitima, invalido = 0;

    if (subtrC == 1 || subtrC == -1 || subtrL == 1 || subtrL == -1 || (subtrL == 1 && subtrC == 1) || (subtrC == -1 && subtrL == -1) || (subtrC == -1 && subtrL == 1) || (subtrC == 1 && subtrL == -1)) {
      verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
      if (vitima == 0) {
        adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
        * proximoJog = 1;
      } else {
        //SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 1 
        if (vitima == 1) {
          if (jogador == 1) {
            printf("Movimentação inválida: Não pode capturar suas peças!\n");
          } else if (jogador == 2) {
            adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
            * proximoJog = 1;
          }
          //SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 2
        } else if (vitima == 2) {
          if (jogador == 2) {
            printf("Movientação inválida: Não pode capturar suas peças!\n");
          } else if (jogador == 1) {
            adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
            * proximoJog = 1;
          }
        }
      }
      //SE O REI ANDAR MAIS QUE UMA CASA
    } else {
      printf("Movientação inválida: Seu rei so pode andar apenas uma casa!\n");
    }
  }
}
void moverTorre(int * proximoJog, int linha, int colunaNum, int jogador, char tabu[8][8], int ** emJogo) {
  if (tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'T' || tabuleiro(linha, colunaNum, 0, ' ', tabu) == 't') {
    int linha2, colunaNum2;
    digiteCasaMigrar( & linha2, & colunaNum2, tabu);
    int subtrL = linha2 - linha;
    int subtrC = colunaNum2 - colunaNum;
    int vitima, invalido = 0;
    // VERIFICAR SE APENAS A COLUNA FOI ALTERADA
     verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
    if (linha2 == linha && colunaNum != colunaNum2) {
    	
      //SE DESLOCOU PRA DIREITA
      if (subtrC > 0) {
        for (int j = colunaNum; j < colunaNum2; j++) {
          if (tabuleiro(linha, j, 0, ' ', tabu) != ' ' && j != colunaNum) {
            printf("Movimentação inválida: Há uma peça no caminho!\n");
            invalido = 1;
            break;
          }
        }
        //SE DESLOCOU PRA ESQUERDA
      } else if (subtrC < 0) {
        for (int j = colunaNum; j > colunaNum2; j--) {
          if (tabuleiro(linha, j, 0, ' ', tabu) != ' ' && j != colunaNum) {
            printf("Movimentação inválida: Há uma peça no caminho!\n");
            invalido = 1;
            break;
          }
        }
      } else if (subtrC == 0) {
        printf("Movimentação inválida!\n");
      }
      // VERIFICAR SE APENAS A LINHA FOI ALTERADA
    } else if (linha2 != linha && colunaNum == colunaNum2) {
      //VERIFICAR SE DESLOCOU PRA CIMA
      if (subtrL > 0) {
        for (int i = linha; i < linha2; i++) {
          if (tabuleiro(i, colunaNum, 0, ' ', tabu) != ' ' && i != linha) {
            printf("Movimentação inválida: Há uma peça no caminho!\n");
            invalido = 1;
            break;
          }
        }
        //VERIFICAR SE DESLOCOU PRA BAIXOU
      } else if (subtrL < 0) {
        for (int i = linha; i > linha2; i--) {
          if (tabuleiro(i, colunaNum, 0, ' ', tabu) != ' ' && i != linha) {
            printf("Movimentação inválida: Há uma peça no caminho!\n");
            invalido = 1;
            break;
          }
        }

      }
      //SE HOUVER UMA MOVIMENTAÇÃO FORA DO PADRÃO
    } else {
      printf("Movimentação inválida: Ou move linha ou move coluna!\n");
      invalido = 1;
    }
    //SE HOUVER UMA JOGADA IVÁLIDA
    if (invalido == 1) {
      //SE A CASA ESTIVER OCUPADA
      if (vitima != 0) {
        //SE O JOGADOR TENTAR SE CAPTURAR
        if (vitima == jogador) {
          printf("Movimentação inválida: Não pode capturar suas peças!\n");
        }
      }
      //SE HOUVER UMA JOGADA VÁLIDA
    } else {
      //SE A CASA ESTIVER DISPONÍVEL
      if (vitima != jogador) {
        adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
        * proximoJog = 1;
        //SE O JOGADOR TENTAR SE CAPTURAR
      } else {
        printf("Movimentação inválida: Não pode capturar suas peças!\n");
      }
    }
  }
}
void moverCavalo(int * proximoJog, int linha, int colunaNum, int jogador, char tabu[8][8], int ** emJogo) {
  if (tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'H' || tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'h') {
    int linha2, colunaNum2, vitima;
    digiteCasaMigrar( & linha2, & colunaNum2, tabu);
    int subtrL = linha2 - linha;
    int subtrC = colunaNum2 - colunaNum;
    verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
    if ((abs(subtrL) == 1 && abs(subtrC) == 2) || (abs(subtrL) == 2 && abs(subtrC) == 1)) {
      //SE O JOGADOR TENTAR SE CAPTURAR
      if (vitima == jogador) {
        printf("Movimentação inválida: Não pode capturar suas peças\n");
      } else {
        adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
        * proximoJog = 1;
      }
    } else {
      //SE HOUVER UMA JOGADA FORA DO PADRÃO
      printf("Movimentação inválida: O cavalo anda em L!\n");
    }
  }
}
void moverPeao(int * proximoJog, int linha, int colunaNum, int jogador, char tabu[8][8], int ** emJogo) {
  int x;

  if (tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'P' || tabuleiro(linha, colunaNum, 0, ' ', tabu) == 'p') {
    //CHECANDO SE É A PRIMEIRA JOGADA DE CADA PEAO (PODEMOS AFIRMAR QUE É O PRIMEIRO LANCE DO PEÃO DO JOGADOR 1, SE ELE ESTIVER LOCALIZADO EM QUALQUER POSIÇÃO DA LINHA 1)
    int linha2, colunaNum2;
    digiteCasaMigrar( & linha2, & colunaNum2, tabu);
    int subtrL = linha2 - linha;
    //SUBTRL: QUANTAS COLUNAS TENTOU MOVER (SUBTRC>0 => DIREITA; SUBTRL<0 => ESQUERDA
    int subtrC = colunaNum2 - colunaNum;
    int vitima;
    //SE MOVER UMA COLUNA 
    if (subtrC == 1 || subtrC == -1) {
      verificarPecasAoRedor( & vitima, linha2, colunaNum2, tabu);
      //SE O JOGADOR TENTAR CAPTURAR UMA CASA VAZIA
      if (vitima == 0) {
        printf("Movimentação inválida: Não há peças para capturar!\n");
      } else {
        //SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 1 
        if (vitima == 1) {
          if (jogador == 1) {
            printf("Movientação inválida: Não pode capturar suas peças!\n");
          } else if (jogador == 2) {
            //SE O PEÃO DO JOGADOR 2 TENTAR SUBIR MAIS DE UMA LINHA
            if (subtrL != -1) {
              printf("Movientação inválida: Seu peão so pode capturar peças que estão uma linha e uma coluna acima dele!\n");
              //SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 1 E O JOGADOR 2 FIZER A MOVIMENTAÇÃO CORRETA
            } else {
              adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
              * proximoJog = 1;
            }
          }
          //SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 2
        } else if (vitima == 2) {
          if (jogador == 2) {
            printf("Movientação inválida: Não pode capturar suas peças!\n");
          } else if (jogador == 1) {
            //SE O PEÁO DO JOGADOR 1 TENTAR DESCER MAIS DE UMA LINHA
            if (subtrL != 1) {
              printf("Movientação inválida: Seu peão so pode capturar peças uma linha e uma coluna abaixo dele!\n");
              //SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 2 E O JOGADOR 1 FIZER A MOVIMENTAÇÃO CORRETA
            } else {
              adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
              * proximoJog = 1;
            }
          }
        }
      }
      //SE TENTAR MOVER MAIS DE UMA COLUNA
    } else if (subtrC > 1 || subtrC < -1) {
      printf("Movimentação inválida: O peão não movimenta mais do que uma coluna!\n");

      //SE NÃO MOVER A COLUNA
    } else if (subtrC == 0) {
      //SE NÃO FIZER UMA MOVIMENTAÇÃO VÁLIDA
      if (subtrL != 1 && subtrL != 2 && subtrL != -1 && subtrL != -2) {
        printf("Movimentação inválida: O peão so pode movimentar no máximo 2 linhas, quando pode! Em um sentido só [baixo(jogador1) ou cima(jogador2)]\n");
        //SE FIZER MOVIMENTAÇÃO VÁLIDA
      } else if (subtrL == 2 || subtrL == 1) {
        //SE O JOGADOR 2 TENTAR FAZER A MOVIMENTAÇÃO DO JOGADOR 1, OU SEJA MOVER PARA BAIXO.
        if (jogador == 2) {
          printf("Movimentação inválida: Seu peão so pode mover para cima!\n");
        } else if (jogador == 1) {
          //SE O JOGADOR 1 TENTAR DESCER 2 CASAS
          if (subtrL == 2) {
            //SE NÃO FOR A PRIMEIRA JOGADA DO PEÃO (1). PARA SER A PRIMEIRA JOGADA DO PEAO (1), ELE DEVE ESTAR NA SEGUNDA LINHA:
            if (linha != 1) {
              printf("Movimentação inválida: O peão pode andar 2 casas so na primeira jogada dele!\n");
              //SE FOR A PREIMEIRA JOGADA DO PEÃO 1:
            } else {
              x = checarCasaVazia(linha2, colunaNum2, tabu);
              //SE A CASA, A MIGRAR, ESTIVER VAZIA
              if (x == 0) {
                adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
                * proximoJog = 1;
                //SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
              } else {
                printf("Movimentação inválida: Essa casa está ocupada!\n");
              }
            }
            //SE O JOGADOR 1 TENTAR DESCER 1 CASA
          } else {
            x = checarCasaVazia(linha2, colunaNum2, tabu);
            //SE A CASA, A MIGRAR, ESTIVER VAZIA
            if (x == 0) {
              adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
              * proximoJog = 1;
              //SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
            } else {
              printf("Movimentação inválida: Essa casa está ocupada!\n");
            }
          }
        }
        //SE O JOGADOR SUBIR 2 OU 1 CASA
      } else if (subtrL == -2 || subtrL == -1) {
        //SE O JOGADOR 1 TENTAR FAZER A MOVIMENTAÇÃO DO JOGADOR 2
        if (jogador == 1) {
          printf("Movimentação inválida: Seu peão so pode mover para baixo!\n");
        } else if (jogador == 2) {
          //SE O JOGADOR 2 TENTAR SUBIR 2 CASAS
          if (subtrL == -2) {
            //SE NÃO FOR A PRIMEIRA JOGADA DO PEÃO (2). PARA SER A PRIMEIRA JOGADA DO PEAO (2), ELE DEVE ESTAR NA SÉTIMA LINHA:
            if (linha != 6) {
              printf("Movimentação inválida: O peão pode andar 2 casas so na primeira jogada dele!\n");
            } else {
              x = checarCasaVazia(linha2, colunaNum2, tabu);
              //SE A CASA, A MIGRAR, ESTIVER VAZIA
              if (x == 0) {
                adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
                * proximoJog = 1;
                //SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
              } else {
                printf("Movimentação inválida: Essa casa está ocupada!\n");
              }
            }
            //SE O JOGADOR 2 TENTAR SUBIR 1 CASA
          } else {
            x = checarCasaVazia(linha2, colunaNum2, tabu);
            //SE A CASA, A MIGRAR, ESTIVER VAZIA
            if (x == 0) {
              adicionarPiece(linha, colunaNum, linha2, colunaNum2, tabu, & emJogo, jogador);
              * proximoJog = 1;
              //SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
            } else {
              printf("Movimentação inválida: Essa casa está ocupada!\n");
            }
          }

        }
      }

    }
  }
}

void moverPiece(int * jogador, char tabu[8][8], int * emJogo) {
  char pieces[7] = "PKQBTH", pieces2[7] = "pkqbth";
  int linha, colunaNum;
  int proximoJog = 0;
  showTabu(tabu);
  setlocale(LC_ALL, "portuguese");
  printf("Vez do jogador: %d\n", * jogador);
  if ( * jogador == 1) {
    printf("Suas peças são as que estão em MAIÚSCULO\n");
    printf("Torre = T, Cavalo = H, Bispo = B, Rainha = Q, Rei = K, Peão = P\n");
  } else {
    printf("Suas peças são as que estão em minúsculo\n");
    printf("Torre = t, Cavalo = h, Bispo = b, Rainha = q, Rei = k, Peão = p\n");
  }
  //SE PROXIMOJOG FOR 0, SIGNIFICA QUE O JOGADOR ATUAL AINDA NAO TERMINOU SUA JOGADA
  while (proximoJog == 0) {

    digiteCasaAtual( & linha, & colunaNum);
    //SE A CASA ESCOLHIDA FOR DO JOGADOR 1
    if (isupper(tabuleiro(linha, colunaNum, 0, ' ', tabu))) {
      if ( * jogador == 1) {
        moverPeao( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverBispo( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverTorre( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverRainha( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverRei( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverCavalo( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);

      } else if ( * jogador == 2) {
        printf("[Erro]: A casa escolhida não possui peças pertencentes à você!\n");
      }
      //SE A CASA ESCOLHIDA FOR DO JOGADOR 2
    } else if (islower(tabuleiro(linha, colunaNum, 0, ' ', tabu))) {
      if ( * jogador == 2) {
        moverPeao( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverBispo( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverTorre( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverRainha( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverRei( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
        moverCavalo( & proximoJog, linha, colunaNum, * jogador, tabu, & emJogo);
      } else if ( * jogador == 1) {
        printf("[Erro]: A casa escolhida não possui peças pertencentes à você!\n");
      }

    } else {
      printf("[Erro]: A casa escolhida não possui peças pertencentes à você!\n");
    }
  }
}

void rodarJogo() {
  int emJogo = 1, jogador;
  /*
  NA PRIMEIRA LINHA DA FUNÇO, ESTAMOS CRIANDO UMA VARIAVEL QUE IRA VERIFICAR SE O XADREZ ESTA EM JOGO (1: SIM, 0:NAO)
  */
		char  tabu [8][8]= {{'T','H','B','Q','K','B','H','T'},
                    	   {'P','P','P','P','P','P','P','P'},
						   {' ',' ',' ',' ',' ',' ',' ',' '}, 
						   {' ',' ',' ',' ',' ',' ',' ',' '},
						   {' ',' ',' ',' ',' ',' ',' ',' '},
						   {' ',' ',' ',' ',' ',' ',' ',' '},
						   {'p','p','p','p','p','p','p','p'},
						   {'t','h','b','q','k','b','h','t'}};
  //	NO WHILE ABAIXO, ENQUANTO O XADREZ ESTIVER EM JOGO(emJogo=1), IREMOS REALIZAR OS SEGUINTES COMANDOS DENTRO DELE
  while (emJogo == 1) {
    moverPiece( & jogador, tabu, & emJogo);
    if (jogador == 1) {
      jogador = 2;
    } else {
      jogador = 1;
    }
  }
}

int main() {
  rodarJogo();
  return 0;
}
