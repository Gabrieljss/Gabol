#include<stdio.h>
#include<locale.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
/*
1- PERMIRTIR JOGADOR MOVIMENTAR AS DEMAIS PEÇAS 
2- TESTAR AS MOVIMENTAÇÕES DO PEÃO
3- FAZER FUNÇÃO PRA OUTRA PEÇA
4- RESOLVER PROBLEMA DO ASCII TABLE
5- CAVALO> 1LINHA:2COLUNAS OU 2COLUNAS:1LINHA/PULA PEÇAS
6- BISPO> X LINHA:X COLUNA
7- TORRE> X LINHA 0COLUNA OU X COLUNA 0LINHA
8- RAINHA> BISPO+TORRE/NAO PULA
9- REI> BISPO+TORRE/X=1

==============FALTA COMENTAR O BISPO!!!!!!!!!!================

==============FALTA COMENTAR O TORRE!!!!!!!!!!================
BISPO BUGADO 
DPS DE CONSERTAR O BISPO, TIRAR O DEBUG 
TIRAR O DEBUG DA TORRE 
*/
	//	int v = 254;
		//MATRIZ QUE IRÁ REPRESENTAR NOSSO TABULEIRO
	
	 tabuleiro(int i, int j, int mudar, char newPiece,char tabu[8][8]){

						   
	char piece = tabu[i][j];
	if(mudar==1){
		tabu[i][j]=newPiece;
		//tabu[i][j]='C';
		//printf("i: %d j=%d TABUU = %c\n ",i,j,tabu[i][j]);
	}else{
	
	return piece;
}
	
	}
					
	//NESSA FUNCAO IREMOS MOSTRAR O TABULEIRO NO CONSOLE
void showTabu(char tabu[8][8]){
	system("cls");
	printf("\t    A B C D E F G H\n");
    int indice = 0;
	for(int i=0;i<8;i++){
		indice++;
		printf("\t %d |%c|%c|%c|%c|%c|%c|%c|%c|\n",indice,tabuleiro(i,0,0,' ',tabu),tabuleiro(i,1,0,' ',tabu),tabuleiro(i,2,0,' ',tabu),tabuleiro(i,3,0,' ',tabu),tabuleiro(i,4,0,' ',tabu),tabuleiro(i,5,0,' ',tabu),tabuleiro(i,6,0,' ',tabu),tabuleiro(i,7,0,' ',tabu));
	}
}
   //NA FUNÇÃO ABAIXO IREMOS PEDIR AO JOGADOR QUE ESCREVA A PEÇA ESCOLHILDA PARA SE MOVIMENTAR	
void digiteCasaAtual(int *plinha, int *pcolunaNum){
		char colunaChar;
		int linha;
	    printf("Escolha a coordenada da sua peça: Coluna depois Linha\n");
	    fflush(stdin);
		scanf("%c",&colunaChar);
		fflush(stdin);
		scanf("%d",&linha);
		fflush(stdin);
		*plinha = linha - 1;
		*pcolunaNum = colunaChar - 65;
	//NESSE WHILE, IREMOS VERIFICAR SE AS COORDENADAS ESCOLHIDAS EXISTE
			if((*pcolunaNum<0 || *pcolunaNum>7) || (*plinha<0 || *plinha>7)){
		/*SISTEMA DE COORD POR ASCII TABLE: AO ESCOLHER A COLUNA, O JOGADOR IRÁ ESCREVER UMA LETRA PARA REPRESENTÁ-LA. CADA LETRA, NA TABELA ASCII, TEM SEU RESPECTIVO NÚMERO.
			A LETRA "A" É A PRIMEIRA LETRA DO ALFABETO E É REPRESENTADA PELO NÚMERO 65. ENTÃO PARA TRANSFORMAR ESSAS COLUNAS DE LETRAS EM NÚMEROS PARA MAPEAR A MATRIZ, NÓS SUBTRAIRMOS 
			O NÚMERO REPRESENTATIVO DE CADA LETRA POR 65. 
			EXEMPLO : COLUNA = A: NUM(A) = 65. 65-65 =0, ENTAO COLUNA É ZERO. COLUNA = B: NUM(B) = 66. 66-65 = 1, ENTAO COLUNA É 1 
		*/
			printf("Coordenada não existe\n");
			}
}
	//NA FUNÇÃO ABAIXO IREMOS PEDIR AO JOGADOR QUE ESCREVA PARA ONDE DESEJA MIGRAR SUA PEÇA	
void digiteCasaMigrar(int *plinha2,int *pcolunaNum2, char tabu[8][8]){
		char colunaChar;
		int linha2,linha,colunaNum;
		printf("Escolha a casa que deseja migrar sua peça (Coluna depois Linha)\n");
			fflush(stdin);
		scanf("%c",&colunaChar);
		fflush(stdin);
		scanf("%d",&linha2);
		fflush(stdin);
		*plinha2 = linha2 - 1;
		//FIZEMOS A DIFERENÇA ABAIXO PARA CONVERTER O CHARACTER EM UMA COLUNA DA MATRIZ ( ASCII TABLE )
		*pcolunaNum2 = colunaChar - 65;
	//NESSE WHILE, IREMOS VERIFICAR SE AS COORDENADAS ESCOLHIDAS EXISTEM
		while((*pcolunaNum2<0 || *pcolunaNum2>7) || (*plinha2<0 || *plinha2>7)){
		printf("Coordenada não existe\n");
		 printf("Escolha a coordenada da sua peça: Coluna depois Linha\n");
		scanf("%c",&colunaChar);
		fflush(stdin);
		scanf("%d",&linha);
		*plinha2 = linha2 - 1;
		/*SISTEMA DE COORD POR ASCII TABLE: AO ESCOLHER A COLUNA, O JOGADOR IRÁ ESCREVER UMA LETRA PARA REPRESENTÁ-LA. CADA LETRA, NA TABELA ASCII, TEM SEU RESPECTIVO NÚMERO.
			A LETRA "A" É A PRIMEIRA LETRA DO ALFABETO E É REPRESENTADA PELO NÚMERO 65. ENTÃO PARA TRANSFORMAR ESSAS COLUNAS DE LETRAS EM NÚMEROS PARA MAPEAR A MATRIZ, NÓS SUBTRAIRMOS 
			O NÚMERO REPRESENTATIVO DE CADA LETRA POR 65. 
			EXEMPLO : COLUNA = A: NUM(A) = 65. 65-65 =0, ENTAO COLUNA É ZERO. COLUNA = B: NUM(B) = 66. 66-65 = 1, ENTAO COLUNA É 1 
		*/
		*pcolunaNum2 = colunaChar - 65;
	}
	
}
	//NA FUNÇÃO ABAIXO, VAMOS VERIFICAR SE A CASA ESCOLHIDA, PARA MOVIMENTAR A PEÇA, ESTÁ DISPONÍVEL
     int checarCasaVazia(int linha,int coluna,char tabu[8][8]){
     	//SE X FOR ZERO, CASA ESTA VAZIA, SENÃO, ESTÁ OCUPADA
     	int x = 0;
		if(tabuleiro(linha,coluna,0,' ',tabu)!=' '){
		printf("Essa casa não está vazia!\n");
		x=1;
	}
	return x;
}
   //NESSA FUNÇÃO, O CÓDIGO IRA ADICIONAR A PEÇA, QUE VOCÊ ESCOLHER, NA CASA ESCOLHIDA
void adicionarPiece(int linha, int coluna, int linha2,int coluna2,char tabu[8][8]){
	//ARMAZENANDO O A PEÇA NA NOVA CASA
	tabuleiro(linha2,coluna2,1,tabuleiro(linha,coluna,0,' ',tabu),tabu);
//	if(linha%2==0){
//		tabu[linha][colunaNum]=' ';
//	}else{
//		tabu[linha][colunaNum]= 254;
//	}
	tabuleiro(linha,coluna,1,' ',tabu);
	showTabu(tabu);
	
}

void verificarPecasAoRedor(int *vitima, int linha, int coluna,char tabu[8][8]){
	char pieces[7] = "PKQBTH", pieces2 [7] = "pkqbth";
	int tam = strlen(pieces);
	*vitima=0;
	for(int x = 0;x<tam;x++){
		if(tabuleiro(linha,coluna,0,' ',tabu)==pieces[x]){
			*vitima=1;
		}else if(tabuleiro(linha,coluna,0,' ',tabu)==pieces2[x]){
			*vitima=2;
		}
	}
	
	}
	
	void moverBispo(int *proximoJog, int linha,int colunaNum,int jogador,char tabu[8][8]){
	if(tabuleiro(linha,colunaNum,0,' ',tabu)=='B'||tabuleiro(linha,colunaNum,0,' ',tabu)=='b'){
	int linha2, colunaNum2;
	digiteCasaMigrar(&linha2,&colunaNum2,tabu);
	int subtrL= linha2-linha;
	int subtrC = colunaNum2 - colunaNum;
	int vitima,x;
	// VERIFICAR SE O NUMERO DE LINHAS E COLUNAS MOVIMENTADAS SAO IGUAIS
	if(abs(subtrL)!= abs(subtrC)){
		printf("Movimentação inválida: O bispo so pode se mover pela diagonal\n");
	}else{
		int j = colunaNum,i = linha, invalido=0;
		verificarPecasAoRedor(&vitima,linha2,colunaNum2,tabu);
			//SE TENTAR SUBIR LINHAS
				if(subtrL<0){
					while(i > linha2){
						//SE TENTAR IR PRA DIREITA
						if(subtrC>0){
							j++;
						//SE TENTAR IR PRA ESQUERDA
						}else if(subtrC<0){
							j--;
						}	
						i--;
						if( tabuleiro(i,j,0,' ',tabu)!= ' ' && i!=linha2 && j !=colunaNum2)  {
							printf("Movimentação inválida: Há uma peça no caminho\n");
							invalido=1;
							break;
						}
					}	
			//SE TENTAR DESCER LINHAS
				}else if(subtrL>0){
					//SE TENTAR IR PRA DIREITA
					while(i < linha2){
						if(subtrC > 0){
							j++;
					//SE TENTAR IR PRA ESQUERDA
						}else if(subtrC<0){
							j--;
						}
						i++;
						if(tabuleiro(i,j,0,' ',tabu)!= ' '&& i!=linha2 && j !=colunaNum2) {
							printf("Movimentação inválida: Há uma peça no caminho\n");
							invalido = 1;
							break;
					}
				}	
			}
			if(invalido == 1){
			if(vitima != 0){
				if(vitima==jogador){
					printf("Movimentação inválida: Não pode capturar suas peças!\n");
				}
				}	
			}else{
					if(vitima!=jogador){
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;	
        }else{
        	printf("Movimentação inválida: Não pode capturar suas peças!\n");
		}
    }
}
}
}
void moverRainha(int *proximoJog,int linha,int colunaNum,int jogador,char tabu[8][8]){
	if(tabuleiro(linha,colunaNum,0,' ',tabu)=='Q'||tabuleiro(linha,colunaNum,0,' ',tabu)=='q'){
	int colunaNum2,linha2;
	digiteCasaMigrar(&linha2,&colunaNum2,tabu);
	int subtrL=linha2-linha;
	int subtrC = colunaNum2 - colunaNum;
	int vitima,invalido=0;
	verificarPecasAoRedor(&vitima,linha2,colunaNum2,tabu);
	// VERIFICAR SE APENAS A COLUNA FOI ALTERADA
	if(linha2==linha && colunaNum != colunaNum2){
		//SE DESLOCOU PRA DIREITA
		if(subtrC>0){
		for(int j = colunaNum; j<colunaNum2;j++){
				if(tabuleiro(linha,j,0,' ',tabu)!=' ' && j!=colunaNum2 && j!=colunaNum){
					printf("Movimentação inválida: Há uma peça no caminho!\n ");
					invalido = 1;
					break;
				}
		}
		//SE DESLOCOU PRA ESQUERDA
	}else if(subtrC<0){
		for(int j = colunaNum; j>colunaNum2;j--){
			if(tabuleiro(linha,j,0,' ',tabu)!=' ' && j!=colunaNum2 && j!=colunaNum){
					printf("Movimentação inválida: Há uma peça no caminho!\n");
					invalido = 1;
					break;
				}
		}
		}else if (subtrC==0){
		printf("Movimentação inválida!");
		invalido =1;
	}
		// VERIFICAR SE APENAS A LINHA FOI ALTERADA
	}else if(linha2!=linha && colunaNum == colunaNum2){
		//VERIFICAR SE DESLOCOU PRA CIMA
		if(subtrL>0){
		for(int i = linha; i<linha2;i++){
				if(tabuleiro(i,colunaNum,0,' ',tabu)!=' '&& i!=linha2 && i!=linha){
					printf("Movimentação inválida: Há uma peça no caminho!\n");
					invalido = 1;
					break;
				}
		}
		//VERIFICAR SE DESLOCOU PRA BAIXOU
	}else if(subtrL<0){
		for(int i = linha; i>linha2;i--){
				if(tabuleiro(i,colunaNum,0,' ',tabu)!=' ' && i!=linha2 && i!=linha){
					printf("Movimentação inválida: Há uma peça no caminho!\n ");
					invalido = 1;
					break;
				}
		}
	
}

}else if(abs(subtrL)== abs(subtrC)){
		int j = colunaNum,i = linha;
		verificarPecasAoRedor(&vitima,linha2,colunaNum2,tabu);
			//SE TENTAR SUBIR LINHAS
				if(subtrL<0){
					while(i > linha2){
						//SE TENTAR IR PRA DIREITA
						if(subtrC>0){
							j++;
						//SE TENTAR IR PRA ESQUERDA
						}else if(subtrC<0){
							j--;
						}	
						i--;
						if(tabuleiro(i,j,0,' ',tabu)!=' ' && i!=linha2 && j !=colunaNum2)  {
							printf("Movimentação inválida: Há uma peça no caminho\n");
							invalido=1;
							break;
						}
					}	
			//SE TENTAR DESCER LINHAS
				}else if(subtrL>0){
					//SE TENTAR IR PRA DIREITA
					while(i < linha2){
						if(subtrC > 0){
							j++;
					//SE TENTAR IR PRA ESQUERDA
						}else if(subtrC<0){
							j--;
						}
						i++;
						if(tabuleiro(i,j,0,' ',tabu)!=' ' && i!=linha2 && j !=colunaNum2) {
							printf("Movimentação inválida: Há uma peça no caminho\n");
							invalido = 1;
							break;
					}
				}	
			}
	}else{
	printf("Movimentação inválida!\n");
	invalido = 1;
}
			if(invalido != 1){
			if(vitima != 0){
				if(vitima==jogador){
					printf("Movimentação inválida: Não pode capturar suas peças!\n tabu = %c, jogador = %d, vitima = %d",tabuleiro(linha2,colunaNum2,0,' ',tabu),jogador,vitima);
				}else{
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;
				}
				}else{
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;
				}	
			}
}
}

void moverRei(int *proximoJog,int linha,int colunaNum,int jogador,char tabu[8][8]){
	if(tabuleiro(linha,colunaNum,0,' ',tabu)=='K'||tabuleiro(linha,colunaNum,0,' ',tabu)=='k'){
	int linha2,colunaNum2;
	digiteCasaMigrar(&linha2,&colunaNum2,tabu);
	int subtrL=linha2-linha;
	int subtrC = colunaNum2 - colunaNum;
	int vitima, invalido=0;
	
	if(subtrC==1 || subtrC==-1 || subtrL==1 || subtrL==-1 || (subtrL==1 && subtrC==1) || (subtrC==-1 && subtrL==-1) || (subtrC==-1 && subtrL==1) || (subtrC==1 && subtrL==-1)){
	verificarPecasAoRedor(&vitima,linha2,colunaNum2,tabu);
	if(vitima==0){
		adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
		*proximoJog = 1;
	}else{
		//SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 1 
		if(vitima==1){
			if(jogador==1){
				printf("Movimentação inválida: Não pode capturar suas peças!\n");
			}else if(jogador==2){
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;
			}
			//SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 2
		}else if(vitima==2){
			if(jogador==2){
				printf("Movientação inválida: Não pode capturar suas peças!\n");
			}else if(jogador==1){
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;
				}
			}
		}
	}
	else{
		printf("Movientação inválida: Seu rei so pode andar apenas uma casa!\n");
	}
}
}
void moverTorre(int *proximoJog,int linha,int colunaNum,int jogador, char tabu[8][8]){
	if(tabuleiro(linha,colunaNum,0,' ',tabu)=='T' ||tabuleiro(linha,colunaNum,0,' ',tabu)=='t'){
	int linha2, colunaNum2;
	digiteCasaMigrar(&linha2,&colunaNum2,tabu);
	int subtrL=linha2-linha;
	int subtrC = colunaNum2 - colunaNum;
	int vitima,invalido=0;
	// VERIFICAR SE APENAS A COLUNA FOI ALTERADA
	if(linha2==linha && colunaNum != colunaNum2){
		//SE DESLOCOU PRA DIREITA
		if(subtrC>0){
		for(int j = colunaNum; j<colunaNum2;j++){
				if(tabuleiro(linha,j,0,' ',tabu)!=' ' && j!=colunaNum){
					printf("Movimentação inválida: Há uma peça no caminho!\n");
					invalido = 1;
					break;
				}
		}
		//SE DESLOCOU PRA ESQUERDA
	}else if(subtrC<0){
		for(int j = colunaNum; j>colunaNum2;j--){
			if(tabuleiro(linha,j,0,' ',tabu)!=' '  && j!=colunaNum){
					printf("Movimentação inválida: Há uma peça no caminho!\n");
					invalido = 1;
					break;
				}
		}
		}else if (subtrC==0){
		printf("Movimentação inválida!");
	}
		// VERIFICAR SE APENAS A LINHA FOI ALTERADA
	}else if(linha2!=linha && colunaNum == colunaNum2){
		//VERIFICAR SE DESLOCOU PRA CIMA
		if(subtrL>0){
		for(int i = linha; i<linha2;i++){
				if(tabuleiro(i,colunaNum,0,' ',tabu)!=' ' && i!=linha){
					printf("Movimentação inválida: Há uma peça no caminho!\n");
					invalido = 1;
					break;
				}
		}
		//VERIFICAR SE DESLOCOU PRA BAIXOU
	}else if(subtrL<0){
		for(int i = linha; i>linha2;i--){
				if(tabuleiro(i,colunaNum,0,' ',tabu)!=' ' && i!=linha){
					printf("Movimentação inválida: Há uma peça no caminho!",i,colunaNum);
					invalido = 1;
					break;
				}
		}
	
}else if(subtrL==0){
	printf("Movimentação inválida!");
	invalido=1;
}
}else{
	printf("Movimentação inválida: Ou move linha ou move coluna!\n");
	invalido=1;
}
			if(invalido == 1){
			if(vitima != 0){
				if(vitima==jogador){
					printf("Movimentação inválida: Não pode capturar suas peças!\n");
				}
				}	
			}else{
					if(vitima!=jogador){
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;	
        }else{
        	printf("Movimentação inválida: Não pode capturar suas peças!\n");
		}
		}
	}
}
void moverCavalo(int *proximoJog, int linha, int colunaNum,int jogador,char tabu[8][8]){
if(tabuleiro(linha,colunaNum,0,' ',tabu)=='H'||tabuleiro(linha,colunaNum,0,' ',tabu)=='h'){
		int linha2,colunaNum2,vitima;
		digiteCasaMigrar(&linha2,&colunaNum2,tabu);
		int subtrL=linha2-linha;
		int subtrC = colunaNum2 - colunaNum;
		verificarPecasAoRedor(&vitima,linha2,colunaNum2,tabu);
		if((abs(subtrL)==1 && abs(subtrC)==2)||(abs(subtrL)==2 && abs(subtrC)==1)){
			if(vitima==jogador){
				printf("Movimentação inválida: Não pode capturar suas peças");
			}else{
				adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
				*proximoJog=1;
			}
		}else{
			printf("Movimentação inválida: O cavalo anda em L!");
		}
	}
}
void moverPeao(int *proximoJog, int linha, int colunaNum,int jogador,char tabu[8][8]){
		int x;
		
		if(tabuleiro(linha,colunaNum,0,' ',tabu)=='P'||tabuleiro(linha,colunaNum,0,' ',tabu)=='p'){
			//CHECANDO SE É A PRIMEIRA JOGADA DE CADA PEAO (PODEMOS AFIRMAR QUE É O PRIMEIRO LANCE DO PEÃO DO JOGADOR 1, SE ELE ESTIVER LOCALIZADO EM QUALQUER POSIÇÃO DA LINHA 1)
		int linha2,colunaNum2;
		digiteCasaMigrar(&linha2,&colunaNum2,tabu);
		int subtrL=linha2-linha;
	//SUBTRL: QUANTAS COLUNAS TENTOU MOVER (SUBTRC>0 => DIREITA; SUBTRL<0 => ESQUERDA
	int subtrC = colunaNum2 - colunaNum;
	int vitima;
	//SE MOVER UMA COLUNA 
	if(subtrC==1 || subtrC==-1){
	verificarPecasAoRedor(&vitima,linha,colunaNum,tabu);
	if(vitima==0){
		printf("Movimentação inválida: Não há peças para capturar!\n");
	}else{
		//SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 1 
		if(vitima==1){
			if(jogador==1){
				printf("Movientação inválida: Não pode capturar suas peças!\n");
			}else if(jogador==2){
				//SE O PEÃO DO JOGADOR 2 TENTAR SUBIR MAIS DE UMA LINHA
				if(subtrL!=-1){
				printf("Movientação inválida: Seu peão so pode capturar peças que estão uma linha e uma coluna acima dele!\n");
				//SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 1 E O JOGADOR 2 FIZER A MOVIMENTAÇÃO CORRETA
				}else{
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;
				}
			}
			//SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 2
		}else if(vitima==2){
			if(jogador==2){
				printf("Movientação inválida: Não pode capturar suas peças!\n");
			}else if(jogador==1){
			//SE O PEÁO DO JOGADOR 1 TENTAR DESCER MAIS DE UMA LINHA
				if(subtrL!=1){
				printf("Movientação inválida: Seu peão so pode capturar peças uma linha e uma coluna abaixo dele!\n");
				//SE A PEÇA CAPTURÁVEL PERTENCER AO JOGADOR 2 E O JOGADOR 1 FIZER A MOVIMENTAÇÃO CORRETA
				}else{
					adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
					*proximoJog = 1;
				}
			}
		}
	}
	//SE TENTAR MOVER MAIS DE UMA COLUNA
	}else if(subtrC>1 || subtrC<-1){
		printf("Movimentação inválida: O peão não movimenta mais do que uma coluna!\n");

		//SE NÃO MOVER A COLUNA
		}else if(subtrC==0){
			//SE NÃO FIZER UMA MOVIMENTAÇÃO VÁLIDA
		if(subtrL!=1 && subtrL!=2 && subtrL !=-1 && subtrL !=-2){
			printf("Movimentação inválida: O peão so pode movimentar no máximo 2 linhas, quando pode! Em um sentido só [baixo(jogador1) ou cima(jogador2)]\n");
			//SE FIZER MOVIMENTAÇÃO VÁLIDA
		}else if(subtrL==2 || subtrL==1){
				//SE O JOGADOR 2 TENTAR FAZER A MOVIMENTAÇÃO DO JOGADOR 1, OU SEJA MOVER PARA BAIXO.
			if(jogador==2){
				printf("Movimentação inválida: Seu peão so pode mover para cima!\n");
			}else if(jogador==1){
				//SE O JOGADOR 1 TENTAR DESCER 2 CASAS
				if(subtrL == 2){
				//SE NÃO FOR A PRIMEIRA JOGADA DO PEÃO (1). PARA SER A PRIMEIRA JOGADA DO PEAO (1), ELE DEVE ESTAR NA SEGUNDA LINHA:
					if(linha!=1){
						printf("Movimentação inválida: O peão pode andar 2 casas so na primeira jogada dele!\n");
				//SE FOR A PREIMEIRA JOGADA DO PEÃO 1:
					}else{
						x = checarCasaVazia(linha2,colunaNum2,tabu);
						//SE A CASA, A MIGRAR, ESTIVER VAZIA
						if(x==0){
						adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
						*proximoJog = 1;
						//SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
					   }else{
					   	printf("Movimentação inválida: Essa casa está ocupada!\n");
					   }
				   }
				//SE O JOGADOR 1 TENTAR DESCER 1 CASA
				}else{
						x = checarCasaVazia(linha2,colunaNum2,tabu);
						//SE A CASA, A MIGRAR, ESTIVER VAZIA
						if(x==0){
						adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
						*proximoJog = 1;
						//SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
					   }else{
					   	printf("Movimentação inválida: Essa casa está ocupada!\n");
					   }
				}
			}
			}else if(subtrL==-2 || subtrL ==-1){
				//SE O JOGADOR 1 TENTAR FAZER A MOVIMENTAÇÃO DO JOGADOR 2
				if(jogador==1){
				printf("Movimentação inválida: Seu peão so pode mover para baixo!\n");
				}else if(jogador==2){
					//SE O JOGADOR 2 TENTAR SUBIR 2 CASAS
					if(subtrL == -2){
						//SE NÃO FOR A PRIMEIRA JOGADA DO PEÃO (2). PARA SER A PRIMEIRA JOGADA DO PEAO (2), ELE DEVE ESTAR NA SÉTIMA LINHA:
					if(linha!=6){
						printf("Movimentação inválida: O peão pode andar 2 casas so na primeira jogada dele!\n");
					}else{
						x = checarCasaVazia(linha2,colunaNum2,tabu);
						//SE A CASA, A MIGRAR, ESTIVER VAZIA
						if(x==0){
						adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
						*proximoJog = 1;
						//SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
					   }else{
					   	printf("Movimentação inválida: Essa casa está ocupada!\n");
					   }
					}
				//SE O JOGADOR 2 TENTAR SUBIR 1 CASA
				}else{
					x = checarCasaVazia(linha2,colunaNum2,tabu);
						//SE A CASA, A MIGRAR, ESTIVER VAZIA
						if(x==0){
						adicionarPiece(linha,colunaNum,linha2,colunaNum2,tabu);
						*proximoJog = 1;
						//SE A CASA, A MIGRAR, ESTIVER OCUPADA. E SE NÃO FOR UMA JOGADA VÁLIDA DE CAPTURA
					   }else{
					   	printf("Movimentação inválida: Essa casa está ocupada!\n");
					   }
					}
					
				}
			}	
		
		}
	}
}

void moverPiece(int *jogador,char tabu[8][8]){
	char pieces[7] = "PKQBTH", pieces2 [7] = "pkqbth";
	int linha, colunaNum;
	int proximoJog=0;
		showTabu(tabu);
		printf("Vez do jogador: %d\n",*jogador);
		if(*jogador==1){
					printf("Suas peças são as que estão em MAIÚSCULO\n");
					printf ("Torre = T, Cavalo = H, Bispo = B, Rainha = Q, Rei = K, Peão = P\n");
				}else{
					printf("Suas peças são as que estão em minúsculo\n");
					printf ("Torre = t, Cavalo = h, Bispo = b, Rainha = q, Rei = k, Peão = p\n");
				}
				//SE PROXIMOJOG FOR 0, SIGNIFICA QUE O JOGADOR ATUAL AINDA NAO TERMINOU SUA JOGADA
	          while (proximoJog == 0){
				digiteCasaAtual(&linha,&colunaNum);
				if(isupper(tabuleiro(linha,colunaNum,0,' ',tabu))){
				if(*jogador==1){
				moverPeao(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverBispo(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverTorre(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverRainha(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverRei(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverCavalo(&proximoJog,linha,colunaNum,*jogador,tabu);
				}else{
					printf("[Erro]: A casa escolhida não possui peças pertencentes à você!\n");
				}
				}else if(islower(tabuleiro(linha,colunaNum,0,' ',tabu))){
					if(*jogador==2){
				moverPeao(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverBispo(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverTorre(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverRainha(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverRei(&proximoJog,linha,colunaNum,*jogador,tabu);
		         moverCavalo(&proximoJog,linha,colunaNum,*jogador,tabu);
					}else{
						printf("[Erro]: A casa escolhida não possui peças pertencentes à você!\n");
					}
						
				}else{
					printf("[Erro]: A casa escolhida não possui peças pertencentes à você!\n");
				}
			}
		}
				
void rodarJogo(){
		setlocale(LC_ALL, "portuguese");
		int emJogo = 1,jogador;
	/*
	NA PRIMEIRA LINHA DA FUNÇO, ESTAMOS CRIANDO UMA VARIAVEL QUE IRA VERIFICAR SE O XADREZ ESTA EM JOGO (1: SIM, 0:NAO)
	NA SEGUNDA LINHA, CRIAMOS UMA OUTRA VARIAVEl PARA DECIDIR A VEZ DO JOGADOR (1 OU 2)
	NA TERCEIRA LINHA, CHAMAMOS O NOSSO TABULEIRO
	NO WHILE ABAIXO, ENQUANTO O XADREZ ESTIVER EM JOGO(emJogo=1), IREMOS REALIZAR OS SEGUINTES COMANDOS DENTRO DELE
	*/
		char  tabu [8][8]= {{'T','H','B','Q','K','B','H','T'},
                    	   {'P','P','P','P','P','P','P','P'},
						   {' ',' ',' ',' ',' ',' ',' ',' '}, 
						   {' ',' ',' ',' ',' ',' ',' ',' '},
						   {' ',' ',' ',' ',' ',' ',' ',' '},
						   {' ',' ',' ',' ',' ',' ',' ',' '},
						   {'p','p','p','p','p','p','p','p'},
						   {'t','h','b','q','k','b','h','t'}};
						   
	while(emJogo==1){
			moverPiece(&jogador,tabu);
	if(jogador==1){
			jogador=2;
		}else{
			jogador=1;
		}
			}
}

int main(){
rodarJogo();
return 0;
}
